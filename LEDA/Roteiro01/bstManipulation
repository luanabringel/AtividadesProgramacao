package adt.bst;

/**
 * - Esta eh a unica classe que pode ser modificada 
 * @author adalbertocajueiro
 *
 * @param <T>
 */
public class SimpleBSTManipulationImpl<T extends Comparable<T>> implements SimpleBSTManipulation<T> {

	private int contador = 0;
	@Override
	public boolean equals(BST<T> tree1, BST<T> tree2) {
		return equals((BSTNode<T>) tree1.getRoot(), (BSTNode<T>) tree2.getRoot());
	}

	private boolean equals(BSTNode<T> node1, BSTNode<T> node2) {
		boolean igualdade = false;
		if (node1.isEmpty() && node2.isEmpty()) {
			igualdade = true;
		}
		else if (!node1.isEmpty() && !node1.isEmpty()) {
			if (node1.equals(node2)) {
				igualdade = equals((BSTNode<T>) node1.getLeft(), (BSTNode<T>) node2.getLeft())
						&& equals((BSTNode<T>) node1.getRight(), (BSTNode<T>) node2.getRight());
			}
		}
		return igualdade;
	}

	@Override
	public boolean isSimilar(BST<T> tree1, BST<T> tree2) {
		return recursiveIsSimilar((BSTNode<T>) tree1.getRoot(), (BSTNode<T>) tree2.getRoot());
	}

	private boolean recursiveIsSimilar(BSTNode<T> node1, BSTNode<T> node2) {
		boolean status = false;
		if (node1.isEmpty() && node2.isEmpty()) {
			status = true;
		} else if (!node1.isEmpty() && !node2.isEmpty()) {
			status = recursiveIsSimilar((BSTNode<T>) node1.getLeft(), (BSTNode<T>) node2.getLeft())
					&& recursiveIsSimilar((BSTNode<T>) node1.getRight(), (BSTNode<T>) node2.getRight());
		}
		return status;
	}

	@Override
	public T orderStatistic(BST<T> tree, int k) {
		T ordem = null;
		if (k >= 1) {
			this.contador = 0;
			ordem = this.orderStatistic((BSTNode<T>) tree.getRoot(), k);
		}
		return ordem;
	}

	private T orderStatistic(BSTNode<T> node, int k) {
		T resultado = null;
		if (!node.isEmpty()) {
			resultado = orderStatistic((BSTNode<T>) node.getLeft(), k);
			this.contador++;
			if (contador == k) {
				resultado = node.getData();
			}
			if (resultado == null) {
				resultado = orderStatistic((BSTNode<T>) node.getRight(), k);
			}
		}
		return resultado;
	}
}
